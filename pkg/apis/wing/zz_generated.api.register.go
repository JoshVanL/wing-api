/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package wing

import (
	"context"
	"fmt"

	wingcommon "github.com/jetstack/wing-api/pkg/apis/wing/common"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalMachine = builders.NewInternalResource(
		"machines",
		"Machine",
		func() runtime.Object { return &Machine{} },
		func() runtime.Object { return &MachineList{} },
	)
	InternalMachineStatus = builders.NewInternalResourceStatus(
		"machines",
		"MachineStatus",
		func() runtime.Object { return &Machine{} },
		func() runtime.Object { return &MachineList{} },
	)
	InternalMachineSet = builders.NewInternalResource(
		"machinesets",
		"MachineSet",
		func() runtime.Object { return &MachineSet{} },
		func() runtime.Object { return &MachineSetList{} },
	)
	InternalMachineSetStatus = builders.NewInternalResourceStatus(
		"machinesets",
		"MachineSetStatus",
		func() runtime.Object { return &MachineSet{} },
		func() runtime.Object { return &MachineSetList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("wing.tarmak.io").WithKinds(
		InternalMachine,
		InternalMachineStatus,
		InternalMachineSet,
		InternalMachineSetStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Machine struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   MachineSpec
	Status MachineStatus
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type MachineSet struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   MachineSetSpec
	Status MachineSetStatus
}

type MachineStatus struct {
	Converge *MachineStatusManifest
	DryRun   *MachineStatusManifest
}

type MachineSetStatus struct {
	Replicas             int32
	FullyLabeledReplicas int32
	ReadyReplicas        int32
	AvailableReplicas    int32
	ObservedGeneration   int64
	ErrorReason          wingcommon.MachineStatusError
	ErrorMessage         *string
}

type MachineStatusManifest struct {
	State               wingcommon.MachineManifestState
	Hash                string
	LastUpdateTimestamp metav1.Time
	Messages            []string
	ExitCodes           []int
}

type MachineSetSpec struct {
	Replicas        *int32
	MinReadySeconds int32
	Selector        metav1.LabelSelector
	Template        MachineTemplateSpec
}

type MachineSpec struct {
	Converge *MachineSpecManifest
	DryRun   *MachineSpecManifest
}

type MachineTemplateSpec struct {
	metav1.ObjectMeta
	Spec MachineSpec
}

type MachineSpecManifest struct {
	Path             string
	Hash             string
	RequestTimestamp metav1.Time
}

//
// Machine Functions and Structs
//
// +k8s:deepcopy-gen=false
type MachineStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type MachineStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type MachineList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Machine
}

func (Machine) NewStatus() interface{} {
	return MachineStatus{}
}

func (pc *Machine) GetStatus() interface{} {
	return pc.Status
}

func (pc *Machine) SetStatus(s interface{}) {
	pc.Status = s.(MachineStatus)
}

func (pc *Machine) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Machine) SetSpec(s interface{}) {
	pc.Spec = s.(MachineSpec)
}

func (pc *Machine) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Machine) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Machine) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Machine.
// +k8s:deepcopy-gen=false
type MachineRegistry interface {
	ListMachines(ctx context.Context, options *internalversion.ListOptions) (*MachineList, error)
	GetMachine(ctx context.Context, id string, options *metav1.GetOptions) (*Machine, error)
	CreateMachine(ctx context.Context, id *Machine) (*Machine, error)
	UpdateMachine(ctx context.Context, id *Machine) (*Machine, error)
	DeleteMachine(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewMachineRegistry(sp builders.StandardStorageProvider) MachineRegistry {
	return &storageMachine{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageMachine struct {
	builders.StandardStorageProvider
}

func (s *storageMachine) ListMachines(ctx context.Context, options *internalversion.ListOptions) (*MachineList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*MachineList), err
}

func (s *storageMachine) GetMachine(ctx context.Context, id string, options *metav1.GetOptions) (*Machine, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Machine), nil
}

func (s *storageMachine) CreateMachine(ctx context.Context, object *Machine) (*Machine, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Machine), nil
}

func (s *storageMachine) UpdateMachine(ctx context.Context, object *Machine) (*Machine, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Machine), nil
}

func (s *storageMachine) DeleteMachine(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, &metav1.DeleteOptions{})
	return sync, err
}

//
// MachineSet Functions and Structs
//
// +k8s:deepcopy-gen=false
type MachineSetSrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type MachineSetSrategyStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type MachineSetList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []MachineSet
}

func (MachineSet) NewStatus() interface{} {
	return MachineSetStatus{}
}

func (pc *MachineSet) GetStatus() interface{} {
	return pc.Status
}

func (pc *MachineSet) SetStatus(s interface{}) {
	pc.Status = s.(MachineSetStatus)
}

func (pc *MachineSet) GetSpec() interface{} {
	return pc.Spec
}

func (pc *MachineSet) SetSpec(s interface{}) {
	pc.Spec = s.(MachineSetSpec)
}

func (pc *MachineSet) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *MachineSet) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc MachineSet) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store MachineSet.
// +k8s:deepcopy-gen=false
type MachineSetRegistry interface {
	ListMachineSets(ctx context.Context, options *internalversion.ListOptions) (*MachineSetList, error)
	GetMachineSet(ctx context.Context, id string, options *metav1.GetOptions) (*MachineSet, error)
	CreateMachineSet(ctx context.Context, id *MachineSet) (*MachineSet, error)
	UpdateMachineSet(ctx context.Context, id *MachineSet) (*MachineSet, error)
	DeleteMachineSet(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewMachineSetRegistry(sp builders.StandardStorageProvider) MachineSetRegistry {
	return &storageMachineSet{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageMachineSet struct {
	builders.StandardStorageProvider
}

func (s *storageMachineSet) ListMachineSets(ctx context.Context, options *internalversion.ListOptions) (*MachineSetList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*MachineSetList), err
}

func (s *storageMachineSet) GetMachineSet(ctx context.Context, id string, options *metav1.GetOptions) (*MachineSet, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*MachineSet), nil
}

func (s *storageMachineSet) CreateMachineSet(ctx context.Context, object *MachineSet) (*MachineSet, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*MachineSet), nil
}

func (s *storageMachineSet) UpdateMachineSet(ctx context.Context, object *MachineSet) (*MachineSet, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*MachineSet), nil
}

func (s *storageMachineSet) DeleteMachineSet(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, &metav1.DeleteOptions{})
	return sync, err
}
